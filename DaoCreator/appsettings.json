{
  "CreateMode": "M",
  //M:輸入Do模式(請將Do檔案放入input資料夾) , C:自訂模式(單個輸出)
  "DaoCreateMethod": "D",
  //CRUD
  //預設只有D
  //Create(Add) Remove(Delete) Update(Edit) Detail(Get)

  "CreateInterface": true,

  //#region 必輸入 參數
  "DaoUsingNameSpace": "using AutoMapper;\r\nusing NEW_ITTS.Core.Daos.Interface;\r\nusing NEW_ITTS.Core.EntityFramework;\r\nusing NEW_ITTS.Core.Models.BusinessObjects;\r\nusing NEW_ITTS.Core.Models.DataObjects;\r\nusing NEW_ITTS.Lib.BaseLayers;",
  //使用 ;\r\n 隔開 末端加上 ; 即可
  "InterfaceUsingNameSpace": "using NEW_ITTS.Core.EntityFramework;\r\nusing NEW_ITTS.Core.Models.BusinessObjects;\r\nusing NEW_ITTS.Lib.BaseLayers.Interface;",
  "DaoNamespace": "NEW_ITTS.Core.Daos",
  "InterfaceDaoNamespace": "NEW_ITTS.Core.Daos.Interface",
  "ContextClassName": "BCCSContext",
  "CallConextMethod": "DbUtil.GetContext()",
  //#endregion
  //==============================================================
  //#region 輸入Do模式

  "DetailProperty": true,
  //是否自動加入Property篩選條件

  //#endregion
  //==============================================================
  //#region 自訂模式 參數
  "ClassName": "BCCS_Dept",
  "VarName": "bCCS_Dept",
  //#endregion

  "CustomMethod": "        protected override void AutoMapperConfiguration()\r\n        {\r\n            Mapper = new MapperConfiguration(x =>\r\n            {\r\n                x.CreateMap<{ClassName}, {ClassName}Bo>();\r\n                x.CreateMap<{ClassName}Bo, {ClassName}>();\r\n                 //忽視屬性\r\n                 //.ForMember(m => m.CreateDtm, s => s.Ignore())\r\n                 //條件忽視屬性(為null時)\r\n                 //.ForAllMembers(m => m.Condition((source, target, sourceValue, targetValue) => sourceValue != null));\r\n            }).CreateMapper();\r\n        }",
  "DaoSchema": "{UsingNameSpace}\r\nusing Microsoft.Data.SqlClient;\r\nusing Microsoft.EntityFrameworkCore;\r\nusing System;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\nusing System.Text;\r\nusing System.Threading.Tasks;\r\n\r\nnamespace {DaoNamespace}\r\n{\r\n    public class {ClassName}Dao : BaseDao, I{ClassName}Dao\r\n    {\r\n{CustomMethod}\r\n{GetMethod}\r\n{AddMethod}\r\n{EditMethod}\r\n{DeleteMethod}\r\n\t}\r\n}",
  "DetailSchema": "\r\n        /// <summary>\r\n        /// 取得 自動宣告EntityDB版\r\n        /// </summary>\r\n        /// <param name=\"{VarName}Bo\">篩選條件</param>\r\n        /// <returns></returns>\r\n        public List<{ClassName}Bo> Get({ClassName}Bo {VarName}Bo)\r\n        {\r\n            List<{ClassName}Bo> result = new List<{ClassName}Bo>();\r\n\r\n            using ({ContextClassName} context = {CallConextMethod})\r\n            {\r\n                result = Get({VarName}Bo, context);\r\n            }\r\n\r\n            return result;\r\n        }\r\n\r\n        /// <summary>\r\n        /// 取得 交易版\r\n        /// </summary>\r\n        /// <param name=\"{VarName}Bo\">篩選條件</param>\r\n        /// <param name=\"context\">EntityDB</param>\r\n        /// <returns></returns>\r\n        public List<{ClassName}Bo> Get({ClassName}Bo {VarName}Bo, {ContextClassName} context)\r\n        {\r\n            List<{ClassName}Bo> result = new List<{ClassName}Bo>();\r\n\r\n            IQueryable<{ClassName}> query = context.{ClassName}.AsQueryable();\r\n{GetConditions}\r\n            IQueryable<{ClassName}> list{ClassName}Do = query.AsNoTracking();\r\n\r\n            if (list{ClassName}Do != null)\r\n            {\r\n                result = list{ClassName}Do.ToList().ConvertAll((a) => Mapper.Map<{ClassName}Bo>(a));\r\n            }\r\n\r\n            return result;\r\n        }\r\n\t\t",
  "DetailConditionSchema": "\r\n            if (!string.IsNullOrEmpty({VarName}Bo.{PropertyName}))\r\n            {\r\n                query = query.Where((a) => a.{PropertyName} == {VarName}Bo.{PropertyName});\r\n            }\r\n",
  "CreateSchema": "\r\n\t\t/// <summary>\r\n        /// 新增 自動宣告EntityDB版\r\n        /// </summary>\r\n        /// <param name=\"{VarName}Bo\">新增物件</param>\r\n        /// <returns></returns>\r\n        public int Add({ClassName}Bo {VarName}Bo)\r\n        {\r\n            int result = 0;\r\n\r\n            using ({ContextClassName} context = {CallConextMethod})\r\n            {\r\n                result = Add({VarName}Bo, context);\r\n            }\r\n\r\n            return result;\r\n        }\r\n\t\t\r\n\t\t/// <summary>\r\n        /// 新增 交易版\r\n        /// </summary>\r\n        /// <param name=\"{VarName}Bo\">新增物件</param>\r\n        /// <param name=\"context\">EntityDB</param>\r\n        /// <returns></returns>\r\n        public int Add({ClassName}Bo {VarName}Bo, {ContextClassName} context)\r\n        {\r\n            {ClassName} {VarName} = Mapper.Map<{ClassName}>({VarName}Bo);\r\n\r\n            context.{ClassName}.Add({VarName});\r\n\r\n            int result = context.SaveChanges();\r\n\r\n            return result;\r\n        }\r\n\t\t",
  "RemoveSchema": "\r\n\t\t/// <summary>\r\n        /// 刪除 自動宣告EntityDB版\r\n        /// </summary>\r\n        /// <param name=\"{VarName}Bo\">刪除物件</param>\r\n        /// <returns></returns>\r\n        public int Delete({ClassName}Bo {VarName}Bo)\r\n        {\r\n            int result = 0;\r\n\r\n            using ({ContextClassName} context = {CallConextMethod})\r\n            {\r\n                result = Delete({VarName}Bo, context);\r\n            }\r\n\r\n            return result;\r\n        }\r\n\r\n\t\t/// <summary>\r\n        /// 刪除 交易版\r\n        /// </summary>\r\n        /// <param name=\"{VarName}Bo\">刪除物件</param>\r\n        /// <param name=\"context\">EntityDB</param>\r\n        /// <returns></returns>\r\n        public int Delete({ClassName}Bo {VarName}Bo, {ContextClassName} context)\r\n        {\r\n            {ClassName} {VarName}Do = context.{ClassName}.Find({VarName}Bo.RmId);\r\n\r\n            context.Remove({VarName}Do);\r\n\r\n            return context.SaveChanges();\r\n        }",
  "UpdateSchema": "\r\n\t\t/// <summary>\r\n        /// 編輯 自動宣告EntityDB版\r\n        /// </summary>\r\n        /// <param name=\"{VarName}Bo\">編輯物件</param>\r\n        /// <returns></returns>\r\n        public int Edit({ClassName}Bo {VarName}Bo)\r\n        {\r\n            int result = 0;\r\n\r\n            using ({ContextClassName} context = {CallConextMethod})\r\n            {\r\n                result = Edit({VarName}Bo, context);\r\n            }\r\n\r\n            return result;\r\n        }\r\n\r\n\t\t/// <summary>\r\n        /// 編輯 交易版\r\n        /// </summary>\r\n        /// <param name=\"{VarName}Bo\">編輯物件</param>\r\n        /// <param name=\"context\">EntityDB</param>\r\n        /// <returns></returns>\r\n        public int Edit({ClassName}Bo {VarName}Bo, {ContextClassName} context)\r\n        {\r\n            {ClassName} {VarName}Do = context.{ClassName}.Find({VarName}Bo.RmId);\r\n\r\n            {VarName}Do = Mapper.Map({VarName}Bo, {VarName}Do);\r\n\r\n            return context.SaveChanges();\r\n        }\r\n\t\t",
  "IDaoSchema": "{UsingNameSpace}\r\nusing System;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\nusing System.Threading.Tasks;\r\n\r\nnamespace {DaoNamespace}\r\n{\r\n    public interface I{ClassName}Dao : IBaseDao\r\n    {\r\n{ICustomMethod}\r\n{IGetMethod}\r\n{IAddMethod}\r\n{IEditMethod}\r\n{IDeleteMethod}\r\n    }\r\n}\r\n",
  "ICustomMethod": "",
  "IDetailSchema": "\r\n        /// <summary>\r\n        /// 取得 自動宣告EntityDB版\r\n        /// </summary>\r\n        /// <param name=\"{VarName}Bo\">篩選條件</param>\r\n        /// <returns></returns>\r\n        public List<{ClassName}Bo> Get({ClassName}Bo {VarName}Bo);\r\n\r\n        /// <summary>\r\n        /// 取得 交易版\r\n        /// </summary>\r\n        /// <param name=\"{VarName}Bo\">篩選條件</param>\r\n        /// <param name=\"context\">EntityDB</param>\r\n        /// <returns></returns>\r\n        public List<{ClassName}Bo> Get({ClassName}Bo {VarName}Bo, {ContextClassName} context);\r\n",
  "ICreateSchema": "\r\n        /// <summary>\r\n        /// 新增 自動宣告EntityDB版\r\n        /// </summary>\r\n        /// <param name=\"{VarName}Bo\">資料</param>\r\n        /// <returns></returns>\r\n        public int Add({ClassName}Bo {VarName}Bo);\r\n\r\n        /// <summary>\r\n        /// 新增 交易版\r\n        /// </summary>\r\n        /// <param name=\"{VarName}Bo\">資料</param>\r\n        /// <param name=\"context\">EntityDB</param>\r\n        /// <returns></returns>\r\n        public int Add({ClassName}Bo {VarName}Bo, {ContextClassName} context);\r\n",
  "IRemoveSchema": "\r\n        /// <summary>\r\n        /// 刪除 自動宣告EntityDB版\r\n        /// </summary>\r\n        /// <param name=\"{VarName}Bo\">資料</param>\r\n        /// <returns></returns>\r\n        public int Delete({ClassName}Bo {VarName}Bo);\r\n\r\n        /// <summary>\r\n        /// 刪除 交易版\r\n        /// </summary>\r\n        /// <param name=\"{VarName}Bo\">資料</param>\r\n        /// <param name=\"context\">EntityDB</param>\r\n        /// <returns></returns>\r\n        public int Delete({ClassName}Bo {VarName}Bo,{ContextClassName} context);",
  "IUpdateSchema": "\r\n        /// <summary>\r\n        /// 編輯 自動宣告EntityDB版\r\n        /// </summary>\r\n        /// <param name=\"{VarName}Bo\">資料</param>\r\n        /// <returns></returns>\r\n        public int Edit({ClassName}Bo {VarName}Bo);\r\n\r\n        /// <summary>\r\n        /// 編輯 交易版\r\n        /// </summary>\r\n        /// <param name=\"{VarName}Bo\">資料</param>\r\n        /// <param name=\"context\">EntityDB</param>\r\n        /// <returns></returns>\r\n        public int Edit({ClassName}Bo {VarName}Bo, {ContextClassName} context);\r\n"
  //Schema 放到Nopad++ 使用ctrl+h取代功能 搜尋模式改"延伸" 找\r\n 取代\\r\\n可以收合 展開則相反 
  // " 請使用 \"
}